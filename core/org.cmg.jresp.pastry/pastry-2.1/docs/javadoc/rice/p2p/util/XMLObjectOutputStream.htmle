<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_51) on Tue Jun 25 15:13:42 CEST 2013 -->
<TITLE>
XMLObjectOutputStream (Rice Pastry - API Specifications)
</TITLE>

<META NAME="date" CONTENT="2013-06-25">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="XMLObjectOutputStream (Rice Pastry - API Specifications)";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/XMLObjectOutputStream.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
Rice Pastry API</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../rice/p2p/util/XMLObjectInputStream.GetField.html" title="class in rice.p2p.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?rice/p2p/util/XMLObjectOutputStream.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="XMLObjectOutputStream.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
rice.p2p.util</FONT>
<BR>
Class XMLObjectOutputStream</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.io.OutputStream
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by ">java.io.ObjectOutputStream
          <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>rice.p2p.util.XMLObjectOutputStream</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>java.io.Closeable, java.io.DataOutput, java.io.Flushable, java.io.ObjectOutput, java.io.ObjectStreamConstants</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>XMLObjectOutputStream</B><DT>extends java.io.ObjectOutputStream</DL>
</PRE>

<P>
XMLObjectOutputStream is an extension of ObjectOutputStream which provides
 for serialization for arbitrary Java objects, in the same manner as the
 ObjectOutputStream class.  This class supports all of the features of 
 the ObjectOutputStream, including serialization support for any Java 
 object graph implementing the Serializable interface, maintenance of
 references in the object graph, support for Externalizable classes, 
 custom serialization via the writeObject() method, alternate field
 writing mechanisms via the putFields() and writeFields() methods, support 
 for the writeUnshared() method, custom serializable field specification via
 the serialPersistentFields field, and dynamic object replacement via the 
 writeReplace() method.

 The format of the XML data written does conform to the JSX XML 
 Schema, available online at http://www.jsx.org/jsx.xsd.  This class is 
 designed to be able to write objects which can then be deserialized using 
 JSX, however, this has not been fully tested and bugs may be encountered.
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>$Id: XMLObjectOutputStream.java 4654 2009-01-08 16:33:07Z jeffh $</DD>
<DT><B>Author:</B></DT>
  <DD>Alan Mislove</DD>
</DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->

<A NAME="nested_class_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Nested Class Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;class</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util">XMLObjectOutputStream.PutField</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This class is an implementation of PutField which is compatible with 
 the XMLObjectOutputStream.</TD>
</TR>
</TABLE>
&nbsp;<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.util.Stack</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#currentClasses">currentClasses</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The stack of classes which are currently being written to the stream</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.util.Stack</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#currentObjects">currentObjects</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The stack of objects which are currently being written to the stream</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.util.Stack</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#currentPutFields">currentPutFields</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The stack of putFields which are currently being written to the stream</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#next">next</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A counter used to generate unique references</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;<A HREF="../../../rice/p2p/util/SoftHashMap.html" title="class in rice.p2p.util">SoftHashMap</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#PERSISTENT_FIELDS">PERSISTENT_FIELDS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A cache of the persistentFields, mapping class->Field[]</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.util.Hashtable</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#references">references</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The collection of references stored in the stream so far, 
 maps Integer(hash) -> reference name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;<A HREF="../../../rice/p2p/util/SoftHashMap.html" title="class in rice.p2p.util">SoftHashMap</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#WRITE_OBJECTS">WRITE_OBJECTS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A cache of the writeObject() methods, mapping class->writeObject()</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;<A HREF="../../../rice/p2p/util/SoftHashMap.html" title="class in rice.p2p.util">SoftHashMap</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#WRITE_REPLACES">WRITE_REPLACES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A cache of the writeReplace() methods, mapping class->writeReplace()</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../rice/p2p/util/XMLWriter.html" title="class in rice.p2p.util">XMLWriter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writer">writer</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The underlying XML writing engine</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_java.io.ObjectStreamConstants"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface java.io.ObjectStreamConstants</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>baseWireHandle, PROTOCOL_VERSION_1, PROTOCOL_VERSION_2, SC_BLOCK_DATA, SC_ENUM, SC_EXTERNALIZABLE, SC_SERIALIZABLE, SC_WRITE_METHOD, STREAM_MAGIC, STREAM_VERSION, SUBCLASS_IMPLEMENTATION_PERMISSION, SUBSTITUTION_PERMISSION, TC_ARRAY, TC_BASE, TC_BLOCKDATA, TC_BLOCKDATALONG, TC_CLASS, TC_CLASSDESC, TC_ENDBLOCKDATA, TC_ENUM, TC_EXCEPTION, TC_LONGSTRING, TC_MAX, TC_NULL, TC_OBJECT, TC_PROXYCLASSDESC, TC_REFERENCE, TC_RESET, TC_STRING</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#XMLObjectOutputStream(java.io.OutputStream)">XMLObjectOutputStream</A></B>(java.io.OutputStream&nbsp;out)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor which writes data from the given output stream in order
 serialize objects.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#assignReference()">assignReference</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which assigns a new unique reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#close()">close</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which closes the underlying output stream for writing.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#defaultWriteObject()">defaultWriteObject</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which can be called by objects if they have a writeObject() method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#flush()">flush</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which flushes all buffered data to the output stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.Class</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#getComponentType(java.lang.Class)">getComponentType</A></B>(java.lang.Class&nbsp;array)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns the component type of the given array
 class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#getDimension(java.lang.Class)">getDimension</A></B>(java.lang.Class&nbsp;array)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns the dimension of the given array class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.reflect.Field[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#getPersistentFields(java.lang.Class)">getPersistentFields</A></B>(java.lang.Class&nbsp;cl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns the serializable fields of the provided class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#getReference(java.lang.Object)">getReference</A></B>(java.lang.Object&nbsp;o)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns a previously stored reference.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.reflect.Field[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#getSerialPersistentFields(java.lang.Class)">getSerialPersistentFields</A></B>(java.lang.Class&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns the serializablePersistenFields field of the provided class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.Class[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#getSuperClasses(java.lang.Class)">getSuperClasses</A></B>(java.lang.Class&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns an array of classes representing the class 
 hierarchy of the provided class, exempting the Object class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#hash(java.lang.Object)">hash</A></B>(java.lang.Object&nbsp;o)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which determines a unique hash value for each object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.io.ObjectOutputStream.PutField</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#putFields()">putFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which can be called by objects if they have a writeObject() method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#putReference(java.lang.Object, java.lang.String)">putReference</A></B>(java.lang.Object&nbsp;o,
             java.lang.String&nbsp;reference)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which adds a reference in the hashtable of references.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#reset()">reset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which resets the output stream, which removes the binding of all previously
 stored references.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#write(byte)">write</A></B>(byte&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a byte to the underlying output stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#write(byte[])">write</A></B>(byte[]&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a array of bytes to the underlying output stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#write(byte[], int, int)">write</A></B>(byte[]&nbsp;b,
      int&nbsp;offset,
      int&nbsp;length)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a array of bytes to the underlying output stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeArray(java.lang.Object, java.lang.String, boolean)">writeArray</A></B>(java.lang.Object&nbsp;o,
           java.lang.String&nbsp;field,
           boolean&nbsp;shared)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an array to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeBoolean(boolean)">writeBoolean</A></B>(boolean&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an boolean to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeByte(byte)">writeByte</A></B>(byte&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an byte to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeByte(int)">writeByte</A></B>(int&nbsp;i)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an byte to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeBytes(java.lang.String)">writeBytes</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a String as a sequence of chars to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeChar(char)">writeChar</A></B>(char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an char to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeChar(int)">writeChar</A></B>(int&nbsp;i)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an char to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeChars(java.lang.String)">writeChars</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a String as a sequence of chars to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeClass(java.lang.Object, java.lang.Class)">writeClass</A></B>(java.lang.Object&nbsp;o,
           java.lang.Class&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes the information for one class for a given object to the 
 stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeDouble(double)">writeDouble</A></B>(double&nbsp;d)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an double to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeFields()">writeFields</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes the current state of the PutField object to the stream as
 this object's fields.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeFields(java.lang.Object, java.lang.Class)">writeFields</A></B>(java.lang.Object&nbsp;o,
            java.lang.Class&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which initiates the default field writing mechanism for the given
 object's class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeFloat(float)">writeFloat</A></B>(float&nbsp;f)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an float to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeInt(int)">writeInt</A></B>(int&nbsp;i)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an int to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeLong(long)">writeLong</A></B>(long&nbsp;l)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an long to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeNull(java.lang.String)">writeNull</A></B>(java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a null item to the stream as the provided field.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeObject(java.lang.Object, java.lang.String)">writeObject</A></B>(java.lang.Object&nbsp;o,
            java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an object to the stream as the given field name
 If the next object represents a reference or null, then the appropriate 
 helper is called.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeObjectOverride(java.lang.Object)">writeObjectOverride</A></B>(java.lang.Object&nbsp;o)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which is called by ObjectOutputStream.writeObject(), and writes
 the given object to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeObjectUnshared(java.lang.Object, java.lang.String, boolean)">writeObjectUnshared</A></B>(java.lang.Object&nbsp;o,
                    java.lang.String&nbsp;field,
                    boolean&nbsp;shared)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an object to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeOrdinaryObject(java.lang.Object, java.lang.String, boolean)">writeOrdinaryObject</A></B>(java.lang.Object&nbsp;o,
                    java.lang.String&nbsp;field,
                    boolean&nbsp;shared)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an ordinary object to the stream (not a String or Array).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(boolean, java.lang.String)">writePrimitive</A></B>(boolean&nbsp;b,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a boolean to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(byte, java.lang.String)">writePrimitive</A></B>(byte&nbsp;b,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a byte to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(char, java.lang.String)">writePrimitive</A></B>(char&nbsp;c,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a char to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(double, java.lang.String)">writePrimitive</A></B>(double&nbsp;d,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a double to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(float, java.lang.String)">writePrimitive</A></B>(float&nbsp;f,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a float to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(int, java.lang.String)">writePrimitive</A></B>(int&nbsp;i,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a int to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(long, java.lang.String)">writePrimitive</A></B>(long&nbsp;l,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a long to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitive(short, java.lang.String)">writePrimitive</A></B>(short&nbsp;s,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a short to the stream, as the given field name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePrimitiveField(java.lang.Object, java.lang.reflect.Field)">writePrimitiveField</A></B>(java.lang.Object&nbsp;o,
                    java.lang.reflect.Field&nbsp;f)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a primitive field to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writePutFields(rice.p2p.util.XMLObjectOutputStream.PutField)">writePutFields</A></B>(<A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util">XMLObjectOutputStream.PutField</A>&nbsp;p)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes out the data from the given PutField class as the data 
 for the given class.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeReference(java.lang.Object, java.lang.String)">writeReference</A></B>(java.lang.Object&nbsp;o,
               java.lang.String&nbsp;field)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a reference to the stream, determined from the references table.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeReset()">writeReset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a reset command to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeShort(int)">writeShort</A></B>(int&nbsp;i)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an short to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeShort(short)">writeShort</A></B>(short&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes an short to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeStreamHeader()">writeStreamHeader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes the XML header to the stream.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeString(java.lang.String, java.lang.String, boolean)">writeString</A></B>(java.lang.String&nbsp;s,
            java.lang.String&nbsp;field,
            boolean&nbsp;shared)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a string to the stream as the provided field.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeUnshared(java.lang.Object)">writeUnshared</A></B>(java.lang.Object&nbsp;o)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes the given object to the stream and does not record a 
 reference to the object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLObjectOutputStream.html#writeUTF(java.lang.String)">writeUTF</A></B>(java.lang.String&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which writes a UTF-encoded String to the stream.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.io.ObjectOutputStream"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.io.ObjectOutputStream</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>annotateClass, annotateProxyClass, drain, enableReplaceObject, replaceObject, useProtocolVersion, write, writeClassDescriptor, writeObject</CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="WRITE_REPLACES"><!-- --></A><H3>
WRITE_REPLACES</H3>
<PRE>
protected static <A HREF="../../../rice/p2p/util/SoftHashMap.html" title="class in rice.p2p.util">SoftHashMap</A> <B>WRITE_REPLACES</B></PRE>
<DL>
<DD>A cache of the writeReplace() methods, mapping class->writeReplace()
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="WRITE_OBJECTS"><!-- --></A><H3>
WRITE_OBJECTS</H3>
<PRE>
protected static <A HREF="../../../rice/p2p/util/SoftHashMap.html" title="class in rice.p2p.util">SoftHashMap</A> <B>WRITE_OBJECTS</B></PRE>
<DL>
<DD>A cache of the writeObject() methods, mapping class->writeObject()
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="PERSISTENT_FIELDS"><!-- --></A><H3>
PERSISTENT_FIELDS</H3>
<PRE>
protected static <A HREF="../../../rice/p2p/util/SoftHashMap.html" title="class in rice.p2p.util">SoftHashMap</A> <B>PERSISTENT_FIELDS</B></PRE>
<DL>
<DD>A cache of the persistentFields, mapping class->Field[]
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="writer"><!-- --></A><H3>
writer</H3>
<PRE>
protected <A HREF="../../../rice/p2p/util/XMLWriter.html" title="class in rice.p2p.util">XMLWriter</A> <B>writer</B></PRE>
<DL>
<DD>The underlying XML writing engine
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="references"><!-- --></A><H3>
references</H3>
<PRE>
protected java.util.Hashtable <B>references</B></PRE>
<DL>
<DD>The collection of references stored in the stream so far, 
 maps Integer(hash) -> reference name.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="next"><!-- --></A><H3>
next</H3>
<PRE>
protected int <B>next</B></PRE>
<DL>
<DD>A counter used to generate unique references
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="currentObjects"><!-- --></A><H3>
currentObjects</H3>
<PRE>
protected java.util.Stack <B>currentObjects</B></PRE>
<DL>
<DD>The stack of objects which are currently being written to the stream
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="currentClasses"><!-- --></A><H3>
currentClasses</H3>
<PRE>
protected java.util.Stack <B>currentClasses</B></PRE>
<DL>
<DD>The stack of classes which are currently being written to the stream
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="currentPutFields"><!-- --></A><H3>
currentPutFields</H3>
<PRE>
protected java.util.Stack <B>currentPutFields</B></PRE>
<DL>
<DD>The stack of putFields which are currently being written to the stream
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="XMLObjectOutputStream(java.io.OutputStream)"><!-- --></A><H3>
XMLObjectOutputStream</H3>
<PRE>
public <B>XMLObjectOutputStream</B>(java.io.OutputStream&nbsp;out)
                      throws java.io.IOException</PRE>
<DL>
<DD>Constructor which writes data from the given output stream in order
 serialize objects.  This constructor also writes the header to the 
 stream, and throws an IOException if an error occurs while writing
 the header.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>out</CODE> - The output stream to write data to
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If the an error occurs</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="writeStreamHeader()"><!-- --></A><H3>
writeStreamHeader</H3>
<PRE>
protected void <B>writeStreamHeader</B>()
                          throws java.io.IOException</PRE>
<DL>
<DD>Method which writes the XML header to the stream.  Usually, this is the
 <?xml version="1.0"?> tag, but it may include processing instructions.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>writeStreamHeader</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="flush()"><!-- --></A><H3>
flush</H3>
<PRE>
public void <B>flush</B>()
           throws java.io.IOException</PRE>
<DL>
<DD>Method which flushes all buffered data to the output stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>flush</CODE> in interface <CODE>java.io.Flushable</CODE><DT><B>Specified by:</B><DD><CODE>flush</CODE> in interface <CODE>java.io.ObjectOutput</CODE><DT><B>Overrides:</B><DD><CODE>flush</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - if an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="close()"><!-- --></A><H3>
close</H3>
<PRE>
public void <B>close</B>()
           throws java.io.IOException</PRE>
<DL>
<DD>Method which closes the underlying output stream for writing.  Any subsequent 
 writes will throw an IOException.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>close</CODE> in interface <CODE>java.io.Closeable</CODE><DT><B>Specified by:</B><DD><CODE>close</CODE> in interface <CODE>java.io.ObjectOutput</CODE><DT><B>Overrides:</B><DD><CODE>close</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="reset()"><!-- --></A><H3>
reset</H3>
<PRE>
public void <B>reset</B>()
           throws java.io.IOException</PRE>
<DL>
<DD>Method which resets the output stream, which removes the binding of all previously
 stored references.  If the same object is written before and after a reset(), it
 will be written twice to the stream.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>reset</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs, or an object is currently being written</DL>
</DD>
</DL>
<HR>

<A NAME="write(byte)"><!-- --></A><H3>
write</H3>
<PRE>
public void <B>write</B>(byte&nbsp;b)
           throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a byte to the underlying output stream.  Simply calls
 writeByte(b)
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="write(byte[])"><!-- --></A><H3>
write</H3>
<PRE>
public void <B>write</B>(byte[]&nbsp;b)
           throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a array of bytes to the underlying output stream.  Simply calls
 writeByte(b[x]) on each of the array elements.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>write</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Specified by:</B><DD><CODE>write</CODE> in interface <CODE>java.io.ObjectOutput</CODE><DT><B>Overrides:</B><DD><CODE>write</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="write(byte[], int, int)"><!-- --></A><H3>
write</H3>
<PRE>
public void <B>write</B>(byte[]&nbsp;b,
                  int&nbsp;offset,
                  int&nbsp;length)
           throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a array of bytes to the underlying output stream.  Simply calls
 writeByte(b[x]) on each of the array elements.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>write</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Specified by:</B><DD><CODE>write</CODE> in interface <CODE>java.io.ObjectOutput</CODE><DT><B>Overrides:</B><DD><CODE>write</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeInt(int)"><!-- --></A><H3>
writeInt</H3>
<PRE>
public void <B>writeInt</B>(int&nbsp;i)
              throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an int to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeInt</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeInt</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>i</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeBoolean(boolean)"><!-- --></A><H3>
writeBoolean</H3>
<PRE>
public void <B>writeBoolean</B>(boolean&nbsp;b)
                  throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an boolean to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeBoolean</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeBoolean</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>b</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeByte(int)"><!-- --></A><H3>
writeByte</H3>
<PRE>
public void <B>writeByte</B>(int&nbsp;i)
               throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an byte to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeByte</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeByte</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>i</CODE> - The value to write to the stream, casted to a byte
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeByte(byte)"><!-- --></A><H3>
writeByte</H3>
<PRE>
public void <B>writeByte</B>(byte&nbsp;b)
               throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an byte to the stream.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>b</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeChar(int)"><!-- --></A><H3>
writeChar</H3>
<PRE>
public void <B>writeChar</B>(int&nbsp;i)
               throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an char to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeChar</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeChar</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>i</CODE> - The value to write to the stream, casted to an int
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeChar(char)"><!-- --></A><H3>
writeChar</H3>
<PRE>
public void <B>writeChar</B>(char&nbsp;c)
               throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an char to the stream.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeDouble(double)"><!-- --></A><H3>
writeDouble</H3>
<PRE>
public void <B>writeDouble</B>(double&nbsp;d)
                 throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an double to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeDouble</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeDouble</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>d</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeFloat(float)"><!-- --></A><H3>
writeFloat</H3>
<PRE>
public void <B>writeFloat</B>(float&nbsp;f)
                throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an float to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeFloat</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeFloat</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>f</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeLong(long)"><!-- --></A><H3>
writeLong</H3>
<PRE>
public void <B>writeLong</B>(long&nbsp;l)
               throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an long to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeLong</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeLong</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>l</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeShort(int)"><!-- --></A><H3>
writeShort</H3>
<PRE>
public void <B>writeShort</B>(int&nbsp;i)
                throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an short to the stream.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeShort</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeShort</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>i</CODE> - The value to write to the stream, casted to a short
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeShort(short)"><!-- --></A><H3>
writeShort</H3>
<PRE>
public void <B>writeShort</B>(short&nbsp;s)
                throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an short to the stream.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeUTF(java.lang.String)"><!-- --></A><H3>
writeUTF</H3>
<PRE>
public void <B>writeUTF</B>(java.lang.String&nbsp;s)
              throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a UTF-encoded String to the stream. This method 
 simply calls writeObject(), as all strings are UTF encoded in XML.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeUTF</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeUTF</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeChars(java.lang.String)"><!-- --></A><H3>
writeChars</H3>
<PRE>
public void <B>writeChars</B>(java.lang.String&nbsp;s)
                throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a String as a sequence of chars to the stream. This
 method is equivalent to calling s.toCharArray() and calling writeChar()
 on each element.  Using this method is *NOT* recommended, as it is an
 increadible waste of space.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeChars</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeChars</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeBytes(java.lang.String)"><!-- --></A><H3>
writeBytes</H3>
<PRE>
public void <B>writeBytes</B>(java.lang.String&nbsp;s)
                throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a String as a sequence of chars to the stream. This
 method is equivalent to calling s.toCharArray() and calling writeChar()
 on each element.  Using this method is *NOT* recommended, as it is an
 increadible waste of space.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>writeBytes</CODE> in interface <CODE>java.io.DataOutput</CODE><DT><B>Overrides:</B><DD><CODE>writeBytes</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeObjectOverride(java.lang.Object)"><!-- --></A><H3>
writeObjectOverride</H3>
<PRE>
public void <B>writeObjectOverride</B>(java.lang.Object&nbsp;o)
                         throws java.io.IOException</PRE>
<DL>
<DD>Method which is called by ObjectOutputStream.writeObject(), and writes
 the given object to the stream.  If the object (or any of it's descendents) 
 has a writeReplace() method, that object is written instead of the original 
 object.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>writeObjectOverride</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeUnshared(java.lang.Object)"><!-- --></A><H3>
writeUnshared</H3>
<PRE>
public void <B>writeUnshared</B>(java.lang.Object&nbsp;o)
                   throws java.io.IOException</PRE>
<DL>
<DD>Method which writes the given object to the stream and does not record a 
 reference to the object.  This guarantees that in future writes of this
 object will not reference this copy of the object.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>writeUnshared</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The value to write to the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="defaultWriteObject()"><!-- --></A><H3>
defaultWriteObject</H3>
<PRE>
public void <B>defaultWriteObject</B>()
                        throws java.io.IOException</PRE>
<DL>
<DD>Method which can be called by objects if they have a writeObject() method.  
 This method initiates the default field serialization mechanism, and
 writes all of the object's fields to the stream.  If this method is called,
 the putFields() method CANNOT be called by the same object.  However, one
 of these two methods MUST be called in the context of a writeObject().
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>defaultWriteObject</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs
<DD><CODE>java.io.NotActiveException</CODE> - If a object is not currently being written</DL>
</DD>
</DL>
<HR>

<A NAME="putFields()"><!-- --></A><H3>
putFields</H3>
<PRE>
public java.io.ObjectOutputStream.PutField <B>putFields</B>()
                                              throws java.io.IOException</PRE>
<DL>
<DD>Method which can be called by objects if they have a writeObject() method.  
 This method returns an object which the callee can then use to specify
 exactly which fields and values should be written to the steam, and can
 specify fields which do not exist as a member of the object. If this method is 
 called, the defaultWriteObject() method CANNOT be called by the same object.  
 However, one of these two methods MUST be called in the context of a writeObject().
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>putFields</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>A PutField, a container for fields to be written
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs
<DD><CODE>java.io.NotActiveException</CODE> - If a object is not currently being read</DL>
</DD>
</DL>
<HR>

<A NAME="writeFields()"><!-- --></A><H3>
writeFields</H3>
<PRE>
public void <B>writeFields</B>()
                 throws java.io.IOException</PRE>
<DL>
<DD>Method which writes the current state of the PutField object to the stream as
 this object's fields. If this method is called, the defaultWriteObject() method 
 CANNOT be called by the same object.  However, one of these two methods MUST be 
 called in the context of a writeObject().
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>writeFields</CODE> in class <CODE>java.io.ObjectOutputStream</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs
<DD><CODE>java.io.NotActiveException</CODE> - If a object is not currently being read</DL>
</DD>
</DL>
<HR>

<A NAME="getPersistentFields(java.lang.Class)"><!-- --></A><H3>
getPersistentFields</H3>
<PRE>
protected java.lang.reflect.Field[] <B>getPersistentFields</B>(java.lang.Class&nbsp;cl)</PRE>
<DL>
<DD>Method which returns the serializable fields of the provided class.  If
 the class has a serialPersistentFields field, then that is used to determine
 which fields are serializable.  Otherwise, all declared non-static and non-transient
 fields are returned.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The class to return the fields for</DL>
</DD>
</DL>
<HR>

<A NAME="getSerialPersistentFields(java.lang.Class)"><!-- --></A><H3>
getSerialPersistentFields</H3>
<PRE>
protected java.lang.reflect.Field[] <B>getSerialPersistentFields</B>(java.lang.Class&nbsp;c)</PRE>
<DL>
<DD>Method which returns the serializablePersistenFields field of the provided class.  
 If no such field exists, then null is returned.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The class to return the fields for</DL>
</DD>
</DL>
<HR>

<A NAME="getComponentType(java.lang.Class)"><!-- --></A><H3>
getComponentType</H3>
<PRE>
protected java.lang.Class <B>getComponentType</B>(java.lang.Class&nbsp;array)</PRE>
<DL>
<DD>Method which returns the component type of the given array
 class.  If the class is not of type array, the class itself
 is returned
<P>
<DD><DL>

<DT><B>Returns:</B><DD>The component type of the array, or the class itself if not an array</DL>
</DD>
</DL>
<HR>

<A NAME="getDimension(java.lang.Class)"><!-- --></A><H3>
getDimension</H3>
<PRE>
protected int <B>getDimension</B>(java.lang.Class&nbsp;array)</PRE>
<DL>
<DD>Method which returns the dimension of the given array class.  This
 is determines recursively by using the getCompoenetType() method
 on the class.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>The dimension of the corresponding array class</DL>
</DD>
</DL>
<HR>

<A NAME="getSuperClasses(java.lang.Class)"><!-- --></A><H3>
getSuperClasses</H3>
<PRE>
protected java.lang.Class[] <B>getSuperClasses</B>(java.lang.Class&nbsp;c)</PRE>
<DL>
<DD>Method which returns an array of classes representing the class 
 hierarchy of the provided class, exempting the Object class.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The class to return the heirarchy for
<DT><B>Returns:</B><DD>The heierarchy of the provided class</DL>
</DD>
</DL>
<HR>

<A NAME="hash(java.lang.Object)"><!-- --></A><H3>
hash</H3>
<PRE>
protected int <B>hash</B>(java.lang.Object&nbsp;o)</PRE>
<DL>
<DD>Method which determines a unique hash value for each object.  This implementation
 uses the System.identityHashCode() method, which returns the memory address.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>An integer, representing a unqiue hash value</DL>
</DD>
</DL>
<HR>

<A NAME="putReference(java.lang.Object, java.lang.String)"><!-- --></A><H3>
putReference</H3>
<PRE>
protected void <B>putReference</B>(java.lang.Object&nbsp;o,
                            java.lang.String&nbsp;reference)</PRE>
<DL>
<DD>Method which adds a reference in the hashtable of references.
 Multiple calls to this method will replace prior objects.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to reference<DD><CODE>reference</CODE> - The reference name to use</DL>
</DD>
</DL>
<HR>

<A NAME="getReference(java.lang.Object)"><!-- --></A><H3>
getReference</H3>
<PRE>
protected java.lang.String <B>getReference</B>(java.lang.Object&nbsp;o)</PRE>
<DL>
<DD>Method which returns a previously stored reference.  If the
 reference cannot be found, null is returned.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to look up
<DT><B>Returns:</B><DD>The reference name, or null if none is found</DL>
</DD>
</DL>
<HR>

<A NAME="assignReference()"><!-- --></A><H3>
assignReference</H3>
<PRE>
protected java.lang.String <B>assignReference</B>()</PRE>
<DL>
<DD>Method which assigns a new unique reference.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>A new unique reference</DL>
</DD>
</DL>
<HR>

<A NAME="writeReset()"><!-- --></A><H3>
writeReset</H3>
<PRE>
protected void <B>writeReset</B>()
                   throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a reset command to the stream.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeObject(java.lang.Object, java.lang.String)"><!-- --></A><H3>
writeObject</H3>
<PRE>
protected void <B>writeObject</B>(java.lang.Object&nbsp;o,
                           java.lang.String&nbsp;field)
                    throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an object to the stream as the given field name
 If the next object represents a reference or null, then the appropriate 
 helper is called.  Otherwise, writeObjectUnshared() is called to process the object.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>field</CODE> - The field name to write the object as
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs
<DD><CODE>java.lang.ClassNotFoundException</CODE> - If the class cannot be found</DL>
</DD>
</DL>
<HR>

<A NAME="writeObjectUnshared(java.lang.Object, java.lang.String, boolean)"><!-- --></A><H3>
writeObjectUnshared</H3>
<PRE>
protected void <B>writeObjectUnshared</B>(java.lang.Object&nbsp;o,
                                   java.lang.String&nbsp;field,
                                   boolean&nbsp;shared)
                            throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an object to the stream.  This method assumes that
 the type of object which is being read is *sharable*, even if it is
 not going to be shared.  Thus, this method can write objects of type
 String, Array, or Serializable.  This method first calls the object's
 writeReplace() method, if such a method exists, and if a different
 object is returned, that object is written instead.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>field</CODE> - The field name to write the object as<DD><CODE>shared</CODE> - Whether or not to record a reference to this object
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeNull(java.lang.String)"><!-- --></A><H3>
writeNull</H3>
<PRE>
protected void <B>writeNull</B>(java.lang.String&nbsp;field)
                  throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a null item to the stream as the provided field.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>field</CODE> - The field name to write the object as
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeString(java.lang.String, java.lang.String, boolean)"><!-- --></A><H3>
writeString</H3>
<PRE>
protected void <B>writeString</B>(java.lang.String&nbsp;s,
                           java.lang.String&nbsp;field,
                           boolean&nbsp;shared)
                    throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a string to the stream as the provided field.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>field</CODE> - The field name to write the object as<DD><CODE>shared</CODE> - Whether or not to record a reference to this object
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeArray(java.lang.Object, java.lang.String, boolean)"><!-- --></A><H3>
writeArray</H3>
<PRE>
protected void <B>writeArray</B>(java.lang.Object&nbsp;o,
                          java.lang.String&nbsp;field,
                          boolean&nbsp;shared)
                   throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an array to the stream.  This method writes the array 
 header, and then recursively writes all of the objects in the array to the 
 stream.  If a non-serializable object is found, the object is replaced with null.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>field</CODE> - The field name to write the object as<DD><CODE>shared</CODE> - Whether or not to record a reference to this object
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeReference(java.lang.Object, java.lang.String)"><!-- --></A><H3>
writeReference</H3>
<PRE>
protected void <B>writeReference</B>(java.lang.Object&nbsp;o,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a reference to the stream, determined from the references table.  This
 method throws an IOException if a reference is not found to the provided object.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>field</CODE> - The field name to write the object as
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeOrdinaryObject(java.lang.Object, java.lang.String, boolean)"><!-- --></A><H3>
writeOrdinaryObject</H3>
<PRE>
protected void <B>writeOrdinaryObject</B>(java.lang.Object&nbsp;o,
                                   java.lang.String&nbsp;field,
                                   boolean&nbsp;shared)
                            throws java.io.IOException</PRE>
<DL>
<DD>Method which writes an ordinary object to the stream (not a String or Array).
 This method first writes the class type, and a list of the classes' supertypes.
 If the object is Externalizable, the writeExternal() method is called and the
 method returns.  Otherwise, each of the superclasses are written, from highest
 to lowest, using the writeClass() method.  If the object is not serializable,
 a NotSerializableException is thrown.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>field</CODE> - The field name to write the object as<DD><CODE>shared</CODE> - Whether or not to record a reference to this object
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs
<DD><CODE>java.io.NotSerializableException</CODE> - If the object is not serializable</DL>
</DD>
</DL>
<HR>

<A NAME="writeClass(java.lang.Object, java.lang.Class)"><!-- --></A><H3>
writeClass</H3>
<PRE>
protected void <B>writeClass</B>(java.lang.Object&nbsp;o,
                          java.lang.Class&nbsp;c)
                   throws java.io.IOException</PRE>
<DL>
<DD>Method which writes the information for one class for a given object to the 
 stream. This method first writes the class type, and if it defines a writeObject()
 method, it is called.  Otherwise, the fields are written in a default manner.  Any 
 extra data not read in the stream is read and ignored.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>c</CODE> - The class of the object to write
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writeFields(java.lang.Object, java.lang.Class)"><!-- --></A><H3>
writeFields</H3>
<PRE>
protected void <B>writeFields</B>(java.lang.Object&nbsp;o,
                           java.lang.Class&nbsp;c)
                    throws java.io.IOException</PRE>
<DL>
<DD>Method which initiates the default field writing mechanism for the given
 object's class.  This method only writes the non-static and non-transient
 fields to the stream - all others are ignored.  It reads all of the fields 
 using the writeField() method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object to write to the stream<DD><CODE>c</CODE> - The class of the object to write
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePutFields(rice.p2p.util.XMLObjectOutputStream.PutField)"><!-- --></A><H3>
writePutFields</H3>
<PRE>
protected void <B>writePutFields</B>(<A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util">XMLObjectOutputStream.PutField</A>&nbsp;p)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes out the data from the given PutField class as the data 
 for the given class.  Each item in the PutField is written as the type it
 was inserted as.  Thus, fields can be written which do not actually exist 
 in the class.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>p</CODE> - The fields to write to  the stream
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitiveField(java.lang.Object, java.lang.reflect.Field)"><!-- --></A><H3>
writePrimitiveField</H3>
<PRE>
protected void <B>writePrimitiveField</B>(java.lang.Object&nbsp;o,
                                   java.lang.reflect.Field&nbsp;f)
                            throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a primitive field to the stream.  This method determiens
 the type of field that needs to be written, and calls f.getX(o), wiritng it 
 to the stream.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>o</CODE> - The object get the primitive from<DD><CODE>f</CODE> - The field representing the primitive about to be written
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(int, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(int&nbsp;i,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a int to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>i</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(boolean, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(boolean&nbsp;b,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a boolean to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>b</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(byte, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(byte&nbsp;b,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a byte to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>b</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(char, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(char&nbsp;c,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a char to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(double, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(double&nbsp;d,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a double to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>d</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(float, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(float&nbsp;f,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a float to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>f</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(long, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(long&nbsp;l,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a long to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>l</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<HR>

<A NAME="writePrimitive(short, java.lang.String)"><!-- --></A><H3>
writePrimitive</H3>
<PRE>
protected void <B>writePrimitive</B>(short&nbsp;s,
                              java.lang.String&nbsp;field)
                       throws java.io.IOException</PRE>
<DL>
<DD>Method which writes a short to the stream, as the given field name.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - The value to write to the stream<DD><CODE>field</CODE> - The field name to use
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - If an error occurs</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/XMLObjectOutputStream.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
Rice Pastry API</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../rice/p2p/util/XMLObjectInputStream.GetField.html" title="class in rice.p2p.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?rice/p2p/util/XMLObjectOutputStream.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="XMLObjectOutputStream.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
<i>Copyright &#169; 2001-2005 - Rice Pastry.</i>
</BODY>
</HTML>
