<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_51) on Tue Jun 25 15:13:42 CEST 2013 -->
<TITLE>
XMLParser (Rice Pastry - API Specifications)
</TITLE>

<META NAME="date" CONTENT="2013-06-25">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="XMLParser (Rice Pastry - API Specifications)";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/XMLParser.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
Rice Pastry API</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../rice/p2p/util/XMLParser.CharArrayBuffer.html" title="class in rice.p2p.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?rice/p2p/util/XMLParser.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="XMLParser.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
rice.p2p.util</FONT>
<BR>
Class XMLParser</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>rice.p2p.util.XMLParser</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD>org.xmlpull.v1.XmlPullParser</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>XMLParser</B><DT>extends java.lang.Object<DT>implements org.xmlpull.v1.XmlPullParser</DL>
</PRE>

<P>
This class is a memory-efficient implementation of most of the XML
 pull parsing API.
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->

<A NAME="nested_class_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Nested Class Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;class</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.CharArrayBuffer.html" title="class in rice.p2p.util">XMLParser.CharArrayBuffer</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This class implements a char array buffer</TD>
</TR>
</TABLE>
&nbsp;<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#attributeKeys">attributeKeys</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the tag parsed was a start tag, the list of attribute-> value pairs</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#attributeValues">attributeValues</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#buffer">buffer</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The internal buffer used to process data</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#BUFFER_SIZE">BUFFER_SIZE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The size of the internal buffer to allocate</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#bufferLimit">bufferLimit</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#bufferPosition">bufferPosition</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal pointers into the buffer</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../rice/p2p/util/StringCache.html" title="class in rice.p2p.util">StringCache</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#cache">cache</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The StringCache used to reduce the memory requirements</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[][]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#ENTITIES">ENTITIES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#inTag">inTag</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether or not we are currently in a tag...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#mark">mark</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal variable which keeps track of the current mark</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../../rice/p2p/util/XMLParser.CharArrayBuffer.html" title="class in rice.p2p.util">XMLParser.CharArrayBuffer</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#marked">marked</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#MAX_ATTRIBUTES">MAX_ATTRIBUTES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#name">name</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the tag parsed was a start/end, the name of the tag</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#numAttributes">numAttributes</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#QUOTE">QUOTE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.io.Reader</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#reader">reader</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The internal reader used to read data</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#SINGLE">SINGLE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#TAG_END">TAG_END</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.util.Stack</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#tags">tags</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The internal stack of tags which have been read</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#text">text</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the tag parsed was text, the text</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#WHITESPACE">WHITESPACE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#WHITESPACE_OR_EQUALS">WHITESPACE_OR_EQUALS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#WHITESPACE_OR_TAG_END">WHITESPACE_OR_TAG_END</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_org.xmlpull.v1.XmlPullParser"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from interface org.xmlpull.v1.XmlPullParser</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>CDSECT, COMMENT, DOCDECL, END_DOCUMENT, END_TAG, ENTITY_REF, FEATURE_PROCESS_DOCDECL, FEATURE_PROCESS_NAMESPACES, FEATURE_REPORT_NAMESPACE_ATTRIBUTES, FEATURE_VALIDATION, IGNORABLE_WHITESPACE, NO_NAMESPACE, PROCESSING_INSTRUCTION, START_DOCUMENT, START_TAG, TEXT, TYPES</CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#XMLParser()">XMLParser</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#addAttribute(java.lang.String, java.lang.String)">addAttribute</A></B>(java.lang.String&nbsp;key,
             java.lang.String&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which adds an attributes</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#clearAttributes()">clearAttributes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which clears the list of attributes</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#contains(char[], char)">contains</A></B>(char[]&nbsp;chars,
         char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which checks for existence</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#convert(java.lang.String)">convert</A></B>(java.lang.String&nbsp;string)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which deconverts all of the HTML/XML entities
 like &amp, &gt, &lt, etc...</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;char</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#current()">current</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which returns the current char in the buffer</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#defineEntityReplacementText(java.lang.String, java.lang.String)">defineEntityReplacementText</A></B>(java.lang.String&nbsp;entityName,
                            java.lang.String&nbsp;replacementText)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#expect(char)">expect</A></B>(char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An assertion method</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#fillBuffer()">fillBuffer</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which actually fills the buffer</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributeCount()">getAttributeCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributeName(int)">getAttributeName</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributeNamespace(int)">getAttributeNamespace</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributePrefix(int)">getAttributePrefix</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributeType(int)">getAttributeType</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributeValue(int)">getAttributeValue</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getAttributeValue(java.lang.String, java.lang.String)">getAttributeValue</A></B>(java.lang.String&nbsp;namespace,
                  java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the attributes value identified by namespace URI and namespace localName.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getColumnNumber()">getColumnNumber</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getDepth()">getDepth</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getEventType()">getEventType</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the type of the current event (START_TAG, END_TAG, TEXT, etc.)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getFeature(java.lang.String)">getFeature</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getInputEncoding()">getInputEncoding</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getLineNumber()">getLineNumber</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For START_TAG or END_TAG events, the (local) name of the current
 element is returned when namespaces are enabled.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getNamespace()">getNamespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getNamespace(java.lang.String)">getNamespace</A></B>(java.lang.String&nbsp;prefix)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getNamespaceCount(int)">getNamespaceCount</A></B>(int&nbsp;depth)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getNamespacePrefix(int)">getNamespacePrefix</A></B>(int&nbsp;pos)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getNamespaceUri(int)">getNamespaceUri</A></B>(int&nbsp;pos)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getPositionDescription()">getPositionDescription</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getPrefix()">getPrefix</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getProperty(java.lang.String)">getProperty</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getText()">getText</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the text content of the current event as String.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;char[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#getTextCharacters(int[])">getTextCharacters</A></B>(int[]&nbsp;holderForStartAndLength)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#isAttributeDefault(int)">isAttributeDefault</A></B>(int&nbsp;index)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#isEmptyElementTag()">isEmptyElementTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#isWhitespace()">isWhitespace</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether the current TEXT event contains only whitespace
 characters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#isWhitespace(java.lang.String)">isWhitespace</A></B>(java.lang.String&nbsp;text)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which checks for existence</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#mark()">mark</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the mark</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#next()">next</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get next parsing event - element content wil be coalesced and only one
 TEXT event must be returned for whole element content
 (comments and processing instructions will be ignored and emtity references
 must be expanded or exception mus be thrown if entity reerence can not be exapnded).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#nextTag()">nextTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#nextText()">nextText</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#nextToken()">nextToken</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseAttributes()">parseAttributes</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses all of the attributes of a start tag</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseDocumentTag()">parseDocumentTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses a document tag</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseEndTag()">parseEndTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses an end tag of the form <tag /></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseEndTag(java.lang.String)">parseEndTag</A></B>(java.lang.String&nbsp;tag)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses an end tag of the form <tag /></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseStartTag()">parseStartTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses a start tag</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseTag()">parseTag</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Internal method which parses a tag</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseText()">parseText</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses an end tag of the form <tag /></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseUntil(char)">parseUntil</A></B>(char&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses and returns up to the next token</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseUntil(char[])">parseUntil</A></B>(char[]&nbsp;chars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses and returns up to the next token</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#parseUntilNot(char[])">parseUntilNot</A></B>(char[]&nbsp;chars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which parses up to the next token</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#require(int, java.lang.String, java.lang.String)">require</A></B>(int&nbsp;type,
        java.lang.String&nbsp;namespace,
        java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#setFeature(java.lang.String, boolean)">setFeature</A></B>(java.lang.String&nbsp;name,
           boolean&nbsp;state)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----- UNSUPPORTED METHODS -----</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#setInput(java.io.InputStream, java.lang.String)">setInput</A></B>(java.io.InputStream&nbsp;inputStream,
         java.lang.String&nbsp;inputEncoding)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#setInput(java.io.Reader)">setInput</A></B>(java.io.Reader&nbsp;in)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set the input source for parser to the given reader and
 resets the parser.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#setProperty(java.lang.String, java.lang.Object)">setProperty</A></B>(java.lang.String&nbsp;name,
            java.lang.Object&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#step()">step</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method which steps forward in the buffer</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../rice/p2p/util/XMLParser.html#unmark()">unmark</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unsets the mark</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="BUFFER_SIZE"><!-- --></A><H3>
BUFFER_SIZE</H3>
<PRE>
public static final int <B>BUFFER_SIZE</B></PRE>
<DL>
<DD>The size of the internal buffer to allocate
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#rice.p2p.util.XMLParser.BUFFER_SIZE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="MAX_ATTRIBUTES"><!-- --></A><H3>
MAX_ATTRIBUTES</H3>
<PRE>
public static final int <B>MAX_ATTRIBUTES</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#rice.p2p.util.XMLParser.MAX_ATTRIBUTES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="QUOTE"><!-- --></A><H3>
QUOTE</H3>
<PRE>
public static final char[] <B>QUOTE</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="TAG_END"><!-- --></A><H3>
TAG_END</H3>
<PRE>
public static final char[] <B>TAG_END</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="WHITESPACE"><!-- --></A><H3>
WHITESPACE</H3>
<PRE>
public static final char[] <B>WHITESPACE</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="WHITESPACE_OR_TAG_END"><!-- --></A><H3>
WHITESPACE_OR_TAG_END</H3>
<PRE>
public static final char[] <B>WHITESPACE_OR_TAG_END</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="WHITESPACE_OR_EQUALS"><!-- --></A><H3>
WHITESPACE_OR_EQUALS</H3>
<PRE>
public static final char[] <B>WHITESPACE_OR_EQUALS</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="SINGLE"><!-- --></A><H3>
SINGLE</H3>
<PRE>
public static final char[] <B>SINGLE</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="ENTITIES"><!-- --></A><H3>
ENTITIES</H3>
<PRE>
public static final java.lang.String[][] <B>ENTITIES</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="reader"><!-- --></A><H3>
reader</H3>
<PRE>
protected java.io.Reader <B>reader</B></PRE>
<DL>
<DD>The internal reader used to read data
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="buffer"><!-- --></A><H3>
buffer</H3>
<PRE>
protected char[] <B>buffer</B></PRE>
<DL>
<DD>The internal buffer used to process data
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="bufferPosition"><!-- --></A><H3>
bufferPosition</H3>
<PRE>
protected int <B>bufferPosition</B></PRE>
<DL>
<DD>Internal pointers into the buffer
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="bufferLimit"><!-- --></A><H3>
bufferLimit</H3>
<PRE>
protected int <B>bufferLimit</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="cache"><!-- --></A><H3>
cache</H3>
<PRE>
protected <A HREF="../../../rice/p2p/util/StringCache.html" title="class in rice.p2p.util">StringCache</A> <B>cache</B></PRE>
<DL>
<DD>The StringCache used to reduce the memory requirements
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="tags"><!-- --></A><H3>
tags</H3>
<PRE>
protected java.util.Stack <B>tags</B></PRE>
<DL>
<DD>The internal stack of tags which have been read
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="name"><!-- --></A><H3>
name</H3>
<PRE>
protected java.lang.String <B>name</B></PRE>
<DL>
<DD>If the tag parsed was a start/end, the name of the tag
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="text"><!-- --></A><H3>
text</H3>
<PRE>
protected java.lang.String <B>text</B></PRE>
<DL>
<DD>If the tag parsed was text, the text
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="attributeKeys"><!-- --></A><H3>
attributeKeys</H3>
<PRE>
protected java.lang.String[] <B>attributeKeys</B></PRE>
<DL>
<DD>If the tag parsed was a start tag, the list of attribute-> value pairs
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="attributeValues"><!-- --></A><H3>
attributeValues</H3>
<PRE>
protected java.lang.String[] <B>attributeValues</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="numAttributes"><!-- --></A><H3>
numAttributes</H3>
<PRE>
protected int <B>numAttributes</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="inTag"><!-- --></A><H3>
inTag</H3>
<PRE>
protected boolean <B>inTag</B></PRE>
<DL>
<DD>Whether or not we are currently in a tag...
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="mark"><!-- --></A><H3>
mark</H3>
<PRE>
protected int <B>mark</B></PRE>
<DL>
<DD>Internal variable which keeps track of the current mark
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="marked"><!-- --></A><H3>
marked</H3>
<PRE>
protected <A HREF="../../../rice/p2p/util/XMLParser.CharArrayBuffer.html" title="class in rice.p2p.util">XMLParser.CharArrayBuffer</A> <B>marked</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="XMLParser()"><!-- --></A><H3>
XMLParser</H3>
<PRE>
public <B>XMLParser</B>()</PRE>
<DL>
<DD>Constructor
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="setInput(java.io.Reader)"><!-- --></A><H3>
setInput</H3>
<PRE>
public void <B>setInput</B>(java.io.Reader&nbsp;in)
              throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD>Set the input source for parser to the given reader and
 resets the parser. The event type is set to the initial value
 START_DOCUMENT.
 Setting the reader to null will just stop parsing and
 reset parser state,
 allowing the parser to free internal resources
 such as parsing buffers.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>setInput</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getText()"><!-- --></A><H3>
getText</H3>
<PRE>
public java.lang.String <B>getText</B>()</PRE>
<DL>
<DD>Returns the text content of the current event as String.
 The value returned depends on current event type,
 for example for TEXT event it is element content
 (this is typical case when next() is used).

 See description of nextToken() for detailed description of
 possible returned values for different types of events.

 <p><strong>NOTE:</strong> in case of ENTITY_REF, this method returns
 the entity replacement text (or null if not available). This is
 the only case where
 getText() and getTextCharacters() return different values.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getText</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../../rice/p2p/util/XMLParser.html#getEventType()"><CODE>getEventType()</CODE></A>, 
<A HREF="../../../rice/p2p/util/XMLParser.html#next()"><CODE>next()</CODE></A>, 
<A HREF="../../../rice/p2p/util/XMLParser.html#nextToken()"><CODE>nextToken()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD>For START_TAG or END_TAG events, the (local) name of the current
 element is returned when namespaces are enabled. When namespace
 processing is disabled, the raw name is returned.
 For ENTITY_REF events, the entity name is returned.
 If the current event is not START_TAG, END_TAG, or ENTITY_REF,
 null is returned.
 <p><b>Please note:</b> To reconstruct the raw element name
  when namespaces are enabled and the prefix is not null,
 you will need to  add the prefix and a colon to localName..
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getName</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeValue(java.lang.String, java.lang.String)"><!-- --></A><H3>
getAttributeValue</H3>
<PRE>
public java.lang.String <B>getAttributeValue</B>(java.lang.String&nbsp;namespace,
                                          java.lang.String&nbsp;name)</PRE>
<DL>
<DD>Returns the attributes value identified by namespace URI and namespace localName.
 If namespaces are disabled namespace must be null.
 If current event type is not START_TAG then IndexOutOfBoundsException will be thrown.

 <p><strong>NOTE:</strong> attribute value must be normalized
 (including entity replacement text if PROCESS_DOCDECL is false) as described in
 <a href="http://www.w3.org/TR/REC-xml#AVNormalize">XML 1.0 section
 3.3.3 Attribute-Value Normalization</a>
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributeValue</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>namespace</CODE> - Namespace of the attribute if namespaces are enabled otherwise must be null<DD><CODE>name</CODE> - If namespaces enabled local name of attribute otherwise just attribute name
<DT><B>Returns:</B><DD>value of attribute or null if attribute with given name does not exist<DT><B>See Also:</B><DD><A HREF="../../../rice/p2p/util/XMLParser.html#defineEntityReplacementText(java.lang.String, java.lang.String)"><CODE>defineEntityReplacementText(java.lang.String, java.lang.String)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getEventType()"><!-- --></A><H3>
getEventType</H3>
<PRE>
public int <B>getEventType</B>()
                 throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD>Returns the type of the current event (START_TAG, END_TAG, TEXT, etc.)
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getEventType</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE><DT><B>See Also:</B><DD><A HREF="../../../rice/p2p/util/XMLParser.html#next()"><CODE>next()</CODE></A>, 
<A HREF="../../../rice/p2p/util/XMLParser.html#nextToken()"><CODE>nextToken()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="next()"><!-- --></A><H3>
next</H3>
<PRE>
public int <B>next</B>()
         throws org.xmlpull.v1.XmlPullParserException,
                java.io.IOException</PRE>
<DL>
<DD>Get next parsing event - element content wil be coalesced and only one
 TEXT event must be returned for whole element content
 (comments and processing instructions will be ignored and emtity references
 must be expanded or exception mus be thrown if entity reerence can not be exapnded).
 If element content is empty (content is "") then no TEXT event will be reported.

 <p><b>NOTE:</b> empty element (such as &lt;tag/>) will be reported
  with  two separate events: START_TAG, END_TAG - it must be so to preserve
   parsing equivalency of empty element to &lt;tag>&lt;/tag>.
  (see isEmptyElementTag ())
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>next</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE><DT><B>See Also:</B><DD><A HREF="../../../rice/p2p/util/XMLParser.html#isEmptyElementTag()"><CODE>isEmptyElementTag()</CODE></A>, 
<CODE>XmlPullParser.START_TAG</CODE>, 
<CODE>XmlPullParser.TEXT</CODE>, 
<CODE>XmlPullParser.END_TAG</CODE>, 
<CODE>XmlPullParser.END_DOCUMENT</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isWhitespace()"><!-- --></A><H3>
isWhitespace</H3>
<PRE>
public boolean <B>isWhitespace</B>()
                     throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD>Checks whether the current TEXT event contains only whitespace
 characters.
 For IGNORABLE_WHITESPACE, this is always true.
 For TEXT and CDSECT, false is returned when the current event text
 contains at least one non-white space character. For any other
 event type an exception is thrown.

 <p><b>Please note:</b> non-validating parsers are not
 able to distinguish whitespace and ignorable whitespace,
 except from whitespace outside the root element. Ignorable
 whitespace is reported as separate event, which is exposed
 via nextToken only.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>isWhitespace</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="fillBuffer()"><!-- --></A><H3>
fillBuffer</H3>
<PRE>
protected void <B>fillBuffer</B>()
                   throws java.io.IOException</PRE>
<DL>
<DD>Internal method which actually fills the buffer
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="current()"><!-- --></A><H3>
current</H3>
<PRE>
protected char <B>current</B>()
                throws java.io.IOException</PRE>
<DL>
<DD>Method which returns the current char in the buffer
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The current char
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="step()"><!-- --></A><H3>
step</H3>
<PRE>
protected void <B>step</B>()</PRE>
<DL>
<DD>Method which steps forward in the buffer
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="mark()"><!-- --></A><H3>
mark</H3>
<PRE>
protected void <B>mark</B>()</PRE>
<DL>
<DD>Sets the mark
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="unmark()"><!-- --></A><H3>
unmark</H3>
<PRE>
protected java.lang.String <B>unmark</B>()</PRE>
<DL>
<DD>Unsets the mark
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="clearAttributes()"><!-- --></A><H3>
clearAttributes</H3>
<PRE>
protected void <B>clearAttributes</B>()</PRE>
<DL>
<DD>Internal method which clears the list of attributes
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="addAttribute(java.lang.String, java.lang.String)"><!-- --></A><H3>
addAttribute</H3>
<PRE>
protected void <B>addAttribute</B>(java.lang.String&nbsp;key,
                            java.lang.String&nbsp;value)</PRE>
<DL>
<DD>Internal method which adds an attributes
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="expect(char)"><!-- --></A><H3>
expect</H3>
<PRE>
protected void <B>expect</B>(char&nbsp;c)
               throws org.xmlpull.v1.XmlPullParserException,
                      java.io.IOException</PRE>
<DL>
<DD>An assertion method
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>the</CODE> - expected char
<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="isWhitespace(java.lang.String)"><!-- --></A><H3>
isWhitespace</H3>
<PRE>
public boolean <B>isWhitespace</B>(java.lang.String&nbsp;text)</PRE>
<DL>
<DD>Internal method which checks for existence
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>chars</CODE> - The chars to check for<DD><CODE>char</CODE> - The char</DL>
</DD>
</DL>
<HR>

<A NAME="contains(char[], char)"><!-- --></A><H3>
contains</H3>
<PRE>
protected boolean <B>contains</B>(char[]&nbsp;chars,
                           char&nbsp;c)</PRE>
<DL>
<DD>Internal method which checks for existence
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>chars</CODE> - The chars to check for<DD><CODE>char</CODE> - The char</DL>
</DD>
</DL>
<HR>

<A NAME="parseUntil(char[])"><!-- --></A><H3>
parseUntil</H3>
<PRE>
protected java.lang.String <B>parseUntil</B>(char[]&nbsp;chars)
                               throws java.io.IOException</PRE>
<DL>
<DD>Method which parses and returns up to the next token
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The token
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseUntil(char)"><!-- --></A><H3>
parseUntil</H3>
<PRE>
protected java.lang.String <B>parseUntil</B>(char&nbsp;c)
                               throws java.io.IOException</PRE>
<DL>
<DD>Method which parses and returns up to the next token
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Returns:</B><DD>The token
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseUntilNot(char[])"><!-- --></A><H3>
parseUntilNot</H3>
<PRE>
protected void <B>parseUntilNot</B>(char[]&nbsp;chars)
                      throws java.io.IOException</PRE>
<DL>
<DD>Method which parses up to the next token
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseEndTag(java.lang.String)"><!-- --></A><H3>
parseEndTag</H3>
<PRE>
protected int <B>parseEndTag</B>(java.lang.String&nbsp;tag)
                   throws org.xmlpull.v1.XmlPullParserException,
                          java.io.IOException</PRE>
<DL>
<DD>Method which parses an end tag of the form <tag />
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>The</CODE> - name of the parsed tag
<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseTag()"><!-- --></A><H3>
parseTag</H3>
<PRE>
protected int <B>parseTag</B>()
                throws org.xmlpull.v1.XmlPullParserException,
                       java.io.IOException</PRE>
<DL>
<DD>Internal method which parses a tag
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseEndTag()"><!-- --></A><H3>
parseEndTag</H3>
<PRE>
protected int <B>parseEndTag</B>()
                   throws org.xmlpull.v1.XmlPullParserException,
                          java.io.IOException</PRE>
<DL>
<DD>Method which parses an end tag of the form <tag />
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>The</CODE> - name of the parsed tag
<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseStartTag()"><!-- --></A><H3>
parseStartTag</H3>
<PRE>
protected int <B>parseStartTag</B>()
                     throws org.xmlpull.v1.XmlPullParserException,
                            java.io.IOException</PRE>
<DL>
<DD>Method which parses a start tag
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseDocumentTag()"><!-- --></A><H3>
parseDocumentTag</H3>
<PRE>
protected int <B>parseDocumentTag</B>()
                        throws org.xmlpull.v1.XmlPullParserException,
                               java.io.IOException</PRE>
<DL>
<DD>Method which parses a document tag
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseAttributes()"><!-- --></A><H3>
parseAttributes</H3>
<PRE>
protected void <B>parseAttributes</B>()
                        throws org.xmlpull.v1.XmlPullParserException,
                               java.io.IOException</PRE>
<DL>
<DD>Method which parses all of the attributes of a start tag
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="parseText()"><!-- --></A><H3>
parseText</H3>
<PRE>
protected int <B>parseText</B>()
                 throws org.xmlpull.v1.XmlPullParserException,
                        java.io.IOException</PRE>
<DL>
<DD>Method which parses an end tag of the form <tag />
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>The</CODE> - name of the parsed tag
<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="convert(java.lang.String)"><!-- --></A><H3>
convert</H3>
<PRE>
protected java.lang.String <B>convert</B>(java.lang.String&nbsp;string)</PRE>
<DL>
<DD>Internal method which deconverts all of the HTML/XML entities
 like &amp, &gt, &lt, etc...
<P>
<DD><DL>
</DL>
</DD>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>string</CODE> - The string to convert
<DT><B>Returns:</B><DD>The result</DL>
</DD>
</DL>
<HR>

<A NAME="setFeature(java.lang.String, boolean)"><!-- --></A><H3>
setFeature</H3>
<PRE>
public void <B>setFeature</B>(java.lang.String&nbsp;name,
                       boolean&nbsp;state)
                throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD>----- UNSUPPORTED METHODS -----
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>setFeature</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getFeature(java.lang.String)"><!-- --></A><H3>
getFeature</H3>
<PRE>
public boolean <B>getFeature</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getFeature</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setProperty(java.lang.String, java.lang.Object)"><!-- --></A><H3>
setProperty</H3>
<PRE>
public void <B>setProperty</B>(java.lang.String&nbsp;name,
                        java.lang.Object&nbsp;value)
                 throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>setProperty</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getProperty(java.lang.String)"><!-- --></A><H3>
getProperty</H3>
<PRE>
public java.lang.Object <B>getProperty</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getProperty</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setInput(java.io.InputStream, java.lang.String)"><!-- --></A><H3>
setInput</H3>
<PRE>
public void <B>setInput</B>(java.io.InputStream&nbsp;inputStream,
                     java.lang.String&nbsp;inputEncoding)
              throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>setInput</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getInputEncoding()"><!-- --></A><H3>
getInputEncoding</H3>
<PRE>
public java.lang.String <B>getInputEncoding</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getInputEncoding</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="defineEntityReplacementText(java.lang.String, java.lang.String)"><!-- --></A><H3>
defineEntityReplacementText</H3>
<PRE>
public void <B>defineEntityReplacementText</B>(java.lang.String&nbsp;entityName,
                                        java.lang.String&nbsp;replacementText)
                                 throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>defineEntityReplacementText</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getNamespaceCount(int)"><!-- --></A><H3>
getNamespaceCount</H3>
<PRE>
public int <B>getNamespaceCount</B>(int&nbsp;depth)
                      throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNamespaceCount</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getNamespacePrefix(int)"><!-- --></A><H3>
getNamespacePrefix</H3>
<PRE>
public java.lang.String <B>getNamespacePrefix</B>(int&nbsp;pos)
                                    throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNamespacePrefix</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getNamespaceUri(int)"><!-- --></A><H3>
getNamespaceUri</H3>
<PRE>
public java.lang.String <B>getNamespaceUri</B>(int&nbsp;pos)
                                 throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNamespaceUri</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getNamespace(java.lang.String)"><!-- --></A><H3>
getNamespace</H3>
<PRE>
public java.lang.String <B>getNamespace</B>(java.lang.String&nbsp;prefix)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNamespace</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getDepth()"><!-- --></A><H3>
getDepth</H3>
<PRE>
public int <B>getDepth</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getDepth</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getPositionDescription()"><!-- --></A><H3>
getPositionDescription</H3>
<PRE>
public java.lang.String <B>getPositionDescription</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getPositionDescription</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getLineNumber()"><!-- --></A><H3>
getLineNumber</H3>
<PRE>
public int <B>getLineNumber</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getLineNumber</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getColumnNumber()"><!-- --></A><H3>
getColumnNumber</H3>
<PRE>
public int <B>getColumnNumber</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getColumnNumber</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getTextCharacters(int[])"><!-- --></A><H3>
getTextCharacters</H3>
<PRE>
public char[] <B>getTextCharacters</B>(int[]&nbsp;holderForStartAndLength)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getTextCharacters</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNamespace()"><!-- --></A><H3>
getNamespace</H3>
<PRE>
public java.lang.String <B>getNamespace</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getNamespace</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getPrefix()"><!-- --></A><H3>
getPrefix</H3>
<PRE>
public java.lang.String <B>getPrefix</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getPrefix</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isEmptyElementTag()"><!-- --></A><H3>
isEmptyElementTag</H3>
<PRE>
public boolean <B>isEmptyElementTag</B>()
                          throws org.xmlpull.v1.XmlPullParserException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>isEmptyElementTag</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeNamespace(int)"><!-- --></A><H3>
getAttributeNamespace</H3>
<PRE>
public java.lang.String <B>getAttributeNamespace</B>(int&nbsp;index)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributeNamespace</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributePrefix(int)"><!-- --></A><H3>
getAttributePrefix</H3>
<PRE>
public java.lang.String <B>getAttributePrefix</B>(int&nbsp;index)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributePrefix</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeType(int)"><!-- --></A><H3>
getAttributeType</H3>
<PRE>
public java.lang.String <B>getAttributeType</B>(int&nbsp;index)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributeType</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isAttributeDefault(int)"><!-- --></A><H3>
isAttributeDefault</H3>
<PRE>
public boolean <B>isAttributeDefault</B>(int&nbsp;index)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>isAttributeDefault</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="nextToken()"><!-- --></A><H3>
nextToken</H3>
<PRE>
public int <B>nextToken</B>()
              throws org.xmlpull.v1.XmlPullParserException,
                     java.io.IOException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>nextToken</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="require(int, java.lang.String, java.lang.String)"><!-- --></A><H3>
require</H3>
<PRE>
public void <B>require</B>(int&nbsp;type,
                    java.lang.String&nbsp;namespace,
                    java.lang.String&nbsp;name)
             throws org.xmlpull.v1.XmlPullParserException,
                    java.io.IOException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>require</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="nextText()"><!-- --></A><H3>
nextText</H3>
<PRE>
public java.lang.String <B>nextText</B>()
                          throws org.xmlpull.v1.XmlPullParserException,
                                 java.io.IOException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>nextText</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="nextTag()"><!-- --></A><H3>
nextTag</H3>
<PRE>
public int <B>nextTag</B>()
            throws org.xmlpull.v1.XmlPullParserException,
                   java.io.IOException</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>nextTag</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>org.xmlpull.v1.XmlPullParserException</CODE>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeCount()"><!-- --></A><H3>
getAttributeCount</H3>
<PRE>
public int <B>getAttributeCount</B>()</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributeCount</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeName(int)"><!-- --></A><H3>
getAttributeName</H3>
<PRE>
public java.lang.String <B>getAttributeName</B>(int&nbsp;index)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributeName</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAttributeValue(int)"><!-- --></A><H3>
getAttributeValue</H3>
<PRE>
public java.lang.String <B>getAttributeValue</B>(int&nbsp;index)</PRE>
<DL>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE>getAttributeValue</CODE> in interface <CODE>org.xmlpull.v1.XmlPullParser</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/XMLParser.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
Rice Pastry API</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../rice/p2p/util/XMLObjectOutputStream.PutField.html" title="class in rice.p2p.util"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../rice/p2p/util/XMLParser.CharArrayBuffer.html" title="class in rice.p2p.util"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?rice/p2p/util/XMLParser.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="XMLParser.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
<i>Copyright &#169; 2001-2005 - Rice Pastry.</i>
</BODY>
</HTML>
